from pythainlp.corpus import thai_stopwords #ลบคำฟุ่มเฟือยภาษาไทย หรือ stopword เป็นคำที่ไม่ค่อยมีความสำคัญ เช่น คำเชื่อม คำอุทานต่างๆ (เป็น, คือ, เเล้ว)
thai_stopwords = list(thai_stopwords()) #เป็นการเรียกใช้ฟังก์ชัน thai_stopwords โดยเเปลงฟังก์ชันให้เป็นลิสต์ของคำเพื่อความง่ายในการเรียกใช้งาน
from pythainlp.tokenize import sent_tokenize #นำเข้าฟังก์ชันที่ใช้ในการตัดประโยค
from pythainlp.tokenize import word_tokenize #นำเข้าฟังก์ชันที่ใช้ในการตัดคำ
from string import punctuation #นำเข้าเครื่องหมายวรรคตอน (!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~)
from heapq import nlargest

news_th = """ปฏิบัติการของ กองทัพรัสเซีย ใน ยูเครน เข้าสัปดาห์ที่สอง ยังไม่มีแสงสว่างที่ปลายอุโมงค์ ไม่ว่าจะเป็นการเจรจาสันติภาพหรือการยึดยูเครนได้สำเร็จ ประธานาธิบดีรัสเซีย วลาดิเมียร์ ปูติน ออกสื่อ ชี้ให้เห็นถึงความจำเป็นของรัสเซียที่จะต้องยึดยูเครน เพราะมีคนมาตั้งขีปนาวุธไว้หน้าบ้าน จำเป็นต้องเข้าไปจัดการ เพื่อปกป้องรัสเซีย ตั้งคำถามกับผู้นำสหรัฐฯ โจ ไบเดน และ ผู้นำสหภาพยุโรป ถ้าถูกกระทำแบบเดียวกันนี้จะตัดสินใจอย่างไร ปูติน ไม่ได้พูดถึงเงื่อนไขการยุติสงครามและไม่ได้พูดถึงความสูญเสียที่เกิดขึ้น ท่ามกลาง กระแสคว่ำบาตรรัสเซียอย่างหนักทุกมิติ ผู้นำรัสเซีย ถึงกับประกาศว่า การประกาศคว่ำบาตรรัสเซีย ในครั้งนี้ถือว่าเป็นการประกาศสงครามแล้ว โฟกัสไปถึง สงครามนิวเคลียร์ ทหารรัสเซีย บุกยึดโรงไฟฟ้านิวเคลียร์ในยูเครนได้ 2 แห่ง ห่างจาก กรุงเคียฟ เมืองหลวงของยูเครนไม่กี่ร้อยกิโล มาตรการตัดน้ำตัดไฟของรัสเซีย ไม่ได้ทำให้ยูเครนหวั่นไหวแต่อย่างใด แต่ที่ประธานาธิบดียูเครน เซเลนสกี หวั่นไหว คือท่าทีของ นาโต ไม่ยินดียินร้ายกับ การปิดน่านฟ้าในยูเครน ทำให้ รัสเซีย สามารถเลือกยิงขีปนาวุธถล่มได้ตามอำเภอใจ การปฏิเสธของ นาโต ว่า ยูเครนไม่เกี่ยวอะไรกับนาโต ทำให้ผู้นำยูเครน สะอึก แม้ในทางพฤตินัยจะมีการส่งยุทโธปกรณ์สนับสนุนยูเครนไม่ขาดสาย แต่ก็ไม่มีเครื่องมือยืนยันว่า ในอนาคตทั้ง สหรัฐฯ อังกฤษ และสหภาพยุโรป ยังจะยืนอยู่ข้าง ยูเครน หรือไม่ หรือสุดท้ายแล้วก็ทิ้งให้ ยูเครนโดดเดี่ยว เช่นเดียวกับการต่อสู้เรียกร้องประชาธิปไตยจาก รัฐบาลทหารเมียนมา ในวันนี้ สู้เองเจ็บเอง ประชาชนชาวยูเครน ได้รับผลกระทบจากสงครามไปเต็มๆ คนยูเครนกว่า 1 ล้านคน ต้องอพยพหนีภัยสงคราม บ้านแตกสาแหรกขาด ชีวิตของคนยูเครนจะไม่เหมือนเดิมอีกต่อไป จาก ประชาชน ที่เคยมีประเทศมีชาติเป็นของตัวเอง จะกลายเป็น ผู้อพยพ ไร้ถิ่นฐาน เช่นเดียวกับประเทศในสหภาพยุโรปและประชาชนชาวรัสเซียที่ได้รับผลกระทบทางเศรษฐกิจ การค้าการลงทุน จากมหาเศรษฐีชาวรัสเซีย ต้องยอมขายกิจการทิ้งยอมขาดทุน กลายเป็นชาติที่น่ารังเกียจในสายตาของสังคม สหรัฐฯ มีโอกาสขายน้ำมันได้มากขึ้น ขายอาวุธยุทโธปกรณ์ได้มากขึ้น โจ ไบเดน ผู้นำสหรัฐฯได้รับความสำคัญที่ทั่วโลกต้องจับตาและติดตามถึงท่าทีของ สหรัฐฯ ต่อการตัดสินใจในสงครามยุโรปครั้งนี้ ถ้า ปูติน เป็นผู้ร้าย โจ ไบเดน ก็จะกลายเป็นพระเอกทันที ส่วนประเทศที่อยู่ฝั่งเดียวกับ รัสเซีย หรือไม่มีอาการต่อต้านรัสเซีย เช่น จีน หรือ อินเดีย ก็คงมองเห็นประโยชน์ในอนาคตเพราะเศรษฐกิจของรัสเซียอยู่ในอันดับท็อปไฟว์ของโลก ถ้าจะมีการย้ายฐานเศรษฐกิจ ผลประโยชน์ก็ย่อมตกเป็นของฝ่ายเดียวกัน ส่วนบ้านเรา ส่งออกไปรัสเซียเมื่อปี 2564 มูลค่า 1 พันกว่าล้านบาท เมื่อ เทียบกับการส่งออกไป อียูและสหรัฐฯ แล้วมีมูลค่ามากกว่าเยอะมาก การตัดธนาคารกลางรัสเซีย ออกจาก ระบบสวิฟต์ ก็คงมีผลกระทบกับเราน้อยมากเพราะค่าเงินบาทไปผูกไว้กับตะกร้าเงินดอลลาร์ ปัญหาที่น่ากลัวว่าจะกระทบกับบ้านเรากลับเป็นปัญหาการเมืองในประเทศ ถ้ายังแทงกั๊ก ขาดความชัดเจน โปร่งใสและตรวจสอบได้ ลับ ลวง หลอก เป็นพรหมวิบัติ 4 ใครได้ ใครเสีย ชาวบ้านตาดำๆ รับกรรมไปตามระเบียบ"""
word_th = word_tokenize(news_th)
sent_th = sent_tokenize(news_th)

word_freq_th = {} #1. สร้าง Dictionary
for word in word_th: #2. เช็คคำที่ได้จากการตัดคำว่าต่างกับเงื่อนไขด้านล่างนี้หรือไม่ ถ้าตรงให้ค่าเป็น 1 ถือว่าเป็นคำเเรกที่เจอ เเต่ถ้าไม่ตรงให้บวกค่าเพิ่มเป็น 1 ถือว่าเป็นคำที่เคยเจอเเล้ว โดยเงื่อนไขที่ว่ามีดังนี้
  if word not in thai_stopwords: #เงื่อนไขที่ 1: มีคำที่เป็นคำในลิสต์ของคำ stopwords หรือไม่ ถ้าไม่ใช่ไปเช็คต่อที่เงื่อนไขที่ 2 ถ้าใช่ ไปที่ else เพื่อบวกค่าเพิ่มอีก 1 ค่า
    if word not in punctuation:  #เงื่อนไขที่ 2: มีเครื่องหมายวรรคตอนหรือไม่ !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ ถ้าไม่ใช่ไปเช็คต่อที่เงื่อนไขที่ 3 ถ้าใช่ ไปที่ else เพื่อบวกค่าเพิ่มอีก 1 ค่า
      if word not in " ": #เงื่อนไขที่ 3: มี white space หรือใหม่ ถ้าไม่ใช่ไปเช็คต่อที่เงื่อนไขที่ 4 ถ้าใช่ ไปที่ else เพื่อบวกค่าเพิ่มอีก 1 ค่า
        if word not in word_freq_th.keys(): #เงื่อนไขที่ 4: word นี้อยู่ใน key ของ dictionary word_freq_th ที่เราใช้เก็บค่าความถี่หรือไม่ถ้าไม่อยู่ ถือว่าตรงกับเงื่อนไขทั้งหมดให้เพิ่มค่าเป็น 1 ถ้าอยู่ถือว่าไม่ตรงให้ไปที่ else เเล้วบวกค่าเพิ่ม 1 ค่า 
          word_freq_th[word] = 1 #เพิ่มค่าเป็น 1 เนื่องจากตรงกับทั้ง 4 เงื่อนไขที่ผ่านมา
        else:
          word_freq_th[word] += 1 #บวกค่าเพิ่มอีก 1 ค่า

max_freq_th = max(word_freq_th.values())
for word in word_freq_th.keys():
  word_freq_th[word] = word_freq_th[word]/max_freq_th

sent_scores_th = {} #สร้าง dictionary 
for sent in sent_th: #นำประโยคที่ตัดไว้ทุกประโยคมาคำนวณ
  for word in sent: #เช็ค[คำ]ที่มีในประโยค A
    if word in word_freq_th.keys(): #ถ้าคำในประโยค A มีใน dictionary ของ word_freq_th(เก็บความถี่ของคำที่ตัดได้)
      if sent not in sent_scores_th.keys(): #ถ้าประโยคไม่ได้อยู่ใน dictionary ของ sent_scores_th
        sent_scores_th[sent] = word_freq_th[word] #ให้ sentence scores เท่ากับ ค่าความถี่ที่ normalize เเล้วของ word frequencies
      else:   #ถ้าประโยคอยู่ใน dictionary ของ sent_scores_th 
        sent_scores_th[sent] += word_freq_th[word] #ให้ บวกเพิ่ม sentence scores เท่ากับ ค่าความถี่ที่ normalize เเล้วของ word frequencies ไปอีก 1 ครั้ง

select_len_th = int(len(sent_scores_th)*0.1)
sum_th = nlargest(select_len_th, sent_scores_th, key=sent_scores_th.get)
print(sum_th)